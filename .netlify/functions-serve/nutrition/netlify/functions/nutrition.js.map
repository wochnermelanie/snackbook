{
  "version": 3,
  "sources": ["../../../../snackbook/netlify/functions/nutrition.mjs"],
  "sourceRoot": "C:/Users/admin/AppData/Local/Temp/tmp-18408-PeJDESo5Vt6f",
  "sourcesContent": ["// netlify/functions/nutrition.mjs\r\nconst KEY = process.env.OPENAI_API_KEY || \"\";\r\n\r\n// sehr kleine N\u00E4hrwert-DB (pro 100g / 100ml / St\u00FCck)\r\nconst DB = [\r\n  [\"h\u00E4hnchenbrust\", /h(\u00E4|ae)hnchen(brust)?|pute(n)?brust|huhn/i, \"100g\", 110, 0, 23, 1.5],\r\n  [\"rinderhack\", /rinderhack|rind(hack)?/i, \"100g\", 250, 0, 26, 17],\r\n  [\"reis, roh\", /reis(?!milch)/i, \"100g\", 350, 78, 7, 1],\r\n  [\"nudeln, roh\", /nudeln|pasta|spaghetti|penne/i, \"100g\", 360, 73, 13, 2],\r\n  [\"haferflocken\", /haferflocken/i, \"100g\", 370, 60, 13, 7],\r\n  [\"zucker\", /zucker/i, \"100g\", 400, 100, 0, 0],\r\n  [\"mehl\", /mehl/i, \"100g\", 364, 76, 10, 1],\r\n  [\"butter\", /butter/i, \"100g\", 745, 0, 1, 82],\r\n  [\"\u00F6l\", /(oel|\u00F6l|olive|raps).*(\u00F6l|oil)|\\b\u00F6l\\b/i, \"100g\", 884, 0, 0, 100],\r\n  [\"milch 3.5%\", /milch/i, \"100ml\", 64, 5, 3.4, 3.6],\r\n  [\"eier\", /\\bei(er)?\\b/i, \"1pc\", 78, 0.6, 6.3, 5.3],\r\n  [\"banane\", /banane/i, \"100g\", 89, 23, 1, 0.3],\r\n  [\"apfel\", /apfel/i, \"100g\", 52, 14, 0.3, 0.2],\r\n  [\"tomate\", /tomate/i, \"100g\", 18, 3.9, 0.9, 0.2],\r\n  [\"kartoffel\", /kartoffel/i, \"100g\", 77, 17, 2, 0.1],\r\n];\r\n\r\nconst APPROX_PIECES = [\r\n  [/ei(er)?/i, 60],\r\n  [/banane/i, 120],\r\n  [/apfel/i, 150],\r\n  [/knoblauch|zehe/i, 5],\r\n  [/zwiebel/i, 120],\r\n  [/m\u00F6hre|karotte/i, 80]\r\n];\r\n\r\nexport async function handler(event) {\r\n  try {\r\n    const { ingredients = [], servings = 1 } = JSON.parse(event.body || \"{}\");\r\n    if (!Array.isArray(ingredients) || ingredients.length === 0) {\r\n      return json(200, { kcal: null, carbs: null, protein: null, fat: null });\r\n    }\r\n\r\n    let total = { kcal: 0, carbs: 0, protein: 0, fat: 0 };\r\n\r\n    for (const lineRaw of ingredients) {\r\n      const line = String(lineRaw).trim();\r\n      if (!line) continue;\r\n\r\n      const parsed = parseLine(line);\r\n      if (parsed.qty == null && KEY) {\r\n        const guess = await aiGuessQty(line).catch(() => null);\r\n        if (guess?.qty) { parsed.qty = guess.qty; parsed.unit = guess.unit || parsed.unit; }\r\n      }\r\n\r\n      const grams = toGrams(parsed);\r\n      const ref = matchDb(line);\r\n      if (!ref) continue;\r\n\r\n      let factor = 0;\r\n      if (ref.per === \"100g\") factor = (grams ?? 0) / 100;\r\n      if (ref.per === \"100ml\") factor = (toMilli(parsed) ?? 0) / 100;\r\n      if (ref.per === \"1pc\") factor = pieceCount(parsed, line);\r\n\r\n      total.kcal   += ref.kcal   * factor;\r\n      total.carbs  += ref.carbs  * factor;\r\n      total.protein+= ref.protein* factor;\r\n      total.fat    += ref.fat    * factor;\r\n    }\r\n\r\n    const out = Object.fromEntries(Object.entries(total).map(([k,v])=>[k, Math.round(v)]));\r\n    return json(200, out);\r\n  } catch {\r\n    return json(200, { kcal: null, carbs: null, protein: null, fat: null });\r\n  }\r\n}\r\n\r\n/* ---------- Helpers ---------- */\r\nfunction parseLine(s){\r\n  const t = s.toLowerCase().replace(',','.');\r\n  const frac = {'\u00BD':0.5,'\u00BC':0.25,'\u00BE':0.75};\r\n  const mQty = t.match(/(\\d+(?:\\.\\d+)?)|[\u00BD\u00BC\u00BE]/);\r\n  const qty = mQty ? (frac[mQty[0]] ?? parseFloat(mQty[0])) : null;\r\n  const mUnit = t.match(/\\b(kg|g|l|ml|el|tl|prise|p\u00E4ckchen|packung|dose|dosen|st\u00FCck|stk|zehe|ei|eier)\\b/);\r\n  const unit = mUnit ? mUnit[1] : null;\r\n  return { qty, unit, text: s };\r\n}\r\nfunction toGrams({qty, unit, text}){\r\n  if (qty == null) {\r\n    for (const [re, g] of APPROX_PIECES) if (re.test(text)) return g;\r\n    return null;\r\n  }\r\n  if (!unit) return qty;\r\n  if (unit === 'kg') return qty * 1000;\r\n  if (unit === 'g')  return qty;\r\n  if (unit === 'el') return qty * 15;\r\n  if (unit === 'tl') return qty * 5;\r\n  if (unit === 'st\u00FCck' || unit === 'stk' || unit === 'ei' || unit === 'eier') {\r\n    for (const [re, g] of APPROX_PIECES) if (re.test(text)) return g * qty;\r\n    return 50 * qty;\r\n  }\r\n  return null;\r\n}\r\nfunction toMilli({qty, unit}){\r\n  if (qty == null) return null;\r\n  if (unit === 'l')  return qty * 1000;\r\n  if (unit === 'ml') return qty;\r\n  if (unit === 'el') return qty * 15;\r\n  if (unit === 'tl') return qty * 5;\r\n  return null;\r\n}\r\nfunction pieceCount({qty, unit}, text){\r\n  if (qty == null) return 1;\r\n  if (unit === 'st\u00FCck' || unit === 'stk' || unit === 'ei' || unit === 'eier') return qty;\r\n  if (/\\bei(er)?\\b|banane|apfel|zwiebel/i.test(text)) return qty;\r\n  return qty;\r\n}\r\nfunction matchDb(line){\r\n  for (const [, re, per, kcal, c, p, f] of DB) {\r\n    if (re.test(line)) return { per, kcal, carbs: c, protein: p, fat: f };\r\n  }\r\n  return null;\r\n}\r\nasync function aiGuessQty(text){\r\n  if (!KEY) return null;\r\n  try{\r\n    const r = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method:\"POST\",\r\n      headers:{ authorization:`Bearer ${KEY}`, \"content-type\":\"application/json\" },\r\n      body: JSON.stringify({\r\n        model: \"gpt-4o-mini\",\r\n        messages: [{ role:\"user\", content:[{ type:\"text\", text:\r\n          \"Sch\u00E4tze aus dieser Zutatenzeile eine Menge und Einheit. Antworte als JSON {qty:number, unit:string|null}. Zeile: \"+text\r\n        }]}],\r\n        response_format: { type: \"json_object\" }\r\n      })\r\n    });\r\n    const j = await r.json();\r\n    return JSON.parse(j?.choices?.[0]?.message?.content || \"{}\");\r\n  }catch{return null;}\r\n}\r\nfunction json(status, body){\r\n  return { statusCode: status, headers: { \"content-type\":\"application/json\", \"cache-control\":\"no-store\" }, body: JSON.stringify(body) };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
