{
  "version": 3,
  "sources": ["../../../../snackbook/netlify/functions/ai-image-recipe.mjs"],
  "sourceRoot": "C:/Users/admin/AppData/Local/Temp/tmp-18408-6pB0has21JJj",
  "sourcesContent": ["// Creates a recipe draft from an image using OpenAI Vision.\r\n// Request body: either a data URL (string) or JSON { image: \"data:image/...;base64,...\" }\r\n\r\nconst KEY = process.env.OPENAI_API_KEY;\r\nconst MODEL = \"gpt-4o-mini\"; // g\u00FCnstig + gut f\u00FCr Vision\r\n\r\nexport async function handler(event) {\r\n  try {\r\n    if (!KEY) return json(404, { error: \"OPENAI_API_KEY missing\" });\r\n\r\n    // 1) Body einlesen (Data-URL oder JSON)\r\n    let dataUrl = \"\";\r\n    if (event.headers[\"content-type\"]?.includes(\"application/json\")) {\r\n      const j = JSON.parse(event.body || \"{}\");\r\n      dataUrl = j.image || j.data || \"\";\r\n    } else {\r\n      // Roh: data URL als Text\r\n      dataUrl = event.body || \"\";\r\n    }\r\n    if (!dataUrl || !/^data:image\\/(png|jpeg|jpg|webp);base64,/.test(dataUrl)) {\r\n      return json(400, { error: \"Send a data URL (image) in body\" });\r\n    }\r\n\r\n    // 2) Prompt\r\n    const prompt =\r\n      \"Erzeuge aus dem Bild ein plausibles Rezept als valides JSON. \" +\r\n      \"Gib nur JSON zur\u00FCck \u2013 keine Erkl\u00E4rungen. Felder: \" +\r\n      \"{title, servings, ingredients[], steps[]}. \" +\r\n      \"ingredients: je Zutat eine Zeile (mit Menge + Einheit, wenn erkennbar). \" +\r\n      \"steps: kurze, nummerierte Kochschritte. \" +\r\n      \"Wenn Angaben unsicher sind, sch\u00E4tze sinnvoll.\";\r\n\r\n    // 3) OpenAI call\r\n    const resp = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"authorization\": `Bearer ${KEY}`,\r\n        \"content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        model: MODEL,\r\n        messages: [\r\n          {\r\n            role: \"user\",\r\n            content: [\r\n              { type: \"text\", text: prompt },\r\n              { type: \"image_url\", image_url: { url: dataUrl } }\r\n            ]\r\n          }\r\n        ],\r\n        temperature: 0.3,\r\n        response_format: { type: \"json_object\" } // erzwingt JSON\r\n      })\r\n    });\r\n\r\n    if (!resp.ok) {\r\n      const errText = await resp.text().catch(() => \"\");\r\n      return json(502, { error: \"OpenAI error\", detail: errText.slice(0, 500) });\r\n    }\r\n\r\n    const out = await resp.json();\r\n    const raw = out?.choices?.[0]?.message?.content || \"{}\";\r\n\r\n    // 4) JSON parsen + absichern\r\n    let draft;\r\n    try {\r\n      draft = JSON.parse(raw);\r\n    } catch {\r\n      draft = {};\r\n    }\r\n\r\n    // Normalize\r\n    const title = (draft.title || \"Rezept\").toString().slice(0, 140);\r\n    const servings = Number(draft.servings || 2) || 2;\r\n    const ingredients = Array.isArray(draft.ingredients) ? draft.ingredients.map(String) : [];\r\n    const steps = Array.isArray(draft.steps) ? draft.steps.map(String) : [];\r\n\r\n    return json(200, { title, servings, ingredients, steps });\r\n  } catch (e) {\r\n    return json(500, { error: String(e) });\r\n  }\r\n}\r\n\r\nfunction json(status, body) {\r\n  return {\r\n    statusCode: status,\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      \"cache-control\": \"no-store\"\r\n    },\r\n    body: JSON.stringify(body)\r\n  };\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAM,MAAM,QAAQ,IAAI;AACxB,IAAM,QAAQ;AAEd,eAAsB,QAAQ,OAAO;AACnC,MAAI;AACF,QAAI,CAAC,IAAK,QAAO,KAAK,KAAK,EAAE,OAAO,yBAAyB,CAAC;AAG9D,QAAI,UAAU;AACd,QAAI,MAAM,QAAQ,cAAc,GAAG,SAAS,kBAAkB,GAAG;AAC/D,YAAM,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AACvC,gBAAU,EAAE,SAAS,EAAE,QAAQ;AAAA,IACjC,OAAO;AAEL,gBAAU,MAAM,QAAQ;AAAA,IAC1B;AACA,QAAI,CAAC,WAAW,CAAC,2CAA2C,KAAK,OAAO,GAAG;AACzE,aAAO,KAAK,KAAK,EAAE,OAAO,kCAAkC,CAAC;AAAA,IAC/D;AAGA,UAAM,SACJ;AAQF,UAAM,OAAO,MAAM,MAAM,8CAA8C;AAAA,MACrE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,iBAAiB,UAAU,GAAG;AAAA,QAC9B,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,cACP,EAAE,MAAM,QAAQ,MAAM,OAAO;AAAA,cAC7B,EAAE,MAAM,aAAa,WAAW,EAAE,KAAK,QAAQ,EAAE;AAAA,YACnD;AAAA,UACF;AAAA,QACF;AAAA,QACA,aAAa;AAAA,QACb,iBAAiB,EAAE,MAAM,cAAc;AAAA;AAAA,MACzC,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,KAAK,IAAI;AACZ,YAAM,UAAU,MAAM,KAAK,KAAK,EAAE,MAAM,MAAM,EAAE;AAChD,aAAO,KAAK,KAAK,EAAE,OAAO,gBAAgB,QAAQ,QAAQ,MAAM,GAAG,GAAG,EAAE,CAAC;AAAA,IAC3E;AAEA,UAAM,MAAM,MAAM,KAAK,KAAK;AAC5B,UAAM,MAAM,KAAK,UAAU,CAAC,GAAG,SAAS,WAAW;AAGnD,QAAI;AACJ,QAAI;AACF,cAAQ,KAAK,MAAM,GAAG;AAAA,IACxB,QAAQ;AACN,cAAQ,CAAC;AAAA,IACX;AAGA,UAAM,SAAS,MAAM,SAAS,UAAU,SAAS,EAAE,MAAM,GAAG,GAAG;AAC/D,UAAM,WAAW,OAAO,MAAM,YAAY,CAAC,KAAK;AAChD,UAAM,cAAc,MAAM,QAAQ,MAAM,WAAW,IAAI,MAAM,YAAY,IAAI,MAAM,IAAI,CAAC;AACxF,UAAM,QAAQ,MAAM,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,IAAI,MAAM,IAAI,CAAC;AAEtE,WAAO,KAAK,KAAK,EAAE,OAAO,UAAU,aAAa,MAAM,CAAC;AAAA,EAC1D,SAAS,GAAG;AACV,WAAO,KAAK,KAAK,EAAE,OAAO,OAAO,CAAC,EAAE,CAAC;AAAA,EACvC;AACF;AAEA,SAAS,KAAK,QAAQ,MAAM;AAC1B,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,IACnB;AAAA,IACA,MAAM,KAAK,UAAU,IAAI;AAAA,EAC3B;AACF;",
  "names": []
}
